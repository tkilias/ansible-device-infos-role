- hosts: allpurpose-worker
  gather_facts: True
  tasks:
    # - name: "get symlinks"
    #   shell: "ls -l /dev/disk/by-id/ | awk '{print $9,$11}' | grep {{ item.key }} | head -n 1 | cut -f 1 -d ' '"
    #   register: uuid
    #   with_dict: "{{ ansible_devices }}"
   
    # - name: set id of disk as fact
    #   set_fact: 
    #     ansible_devices: "{{ ansible_devices | default({}) | combine( {item.item.key: { 'wxn_id': item.stdout}}) }}"
    #   when: item.stdout is defined and item.rc is defined and item.rc==0
    #   with_items: "{{ uuid.results }}"

    - name: "get filesystems for disks 1"
      set_fact:
        pairs: >
              {% set t1 = [] %}
              {% for dev in ansible_devices %}
                {% for part in ansible_devices[dev].partitions %}
                  {% set t1 = t1 + [1] %}
                {%endfor%}
              {%endfor%}
              {{ t1 }}
          
    - name: "debug regex"
      debug:
        # msg: "{{ item | regex_replace('(.*)=(.*)','\\1') }}"
        msg: "{{ item }}"
      with_items: "{{ pairs }}"
      
      
      #######################################################################


    - name: "get filesystems for disks"
      set_fact:
        device_partitions_as_list: "{% set partitions = item.value.partitions | list %}{{ device_partitions_as_list | default([]) + [{'partitions':partitions,'device':item.key}] }}"
      with_dict: "{{ ansible_devices }}"
 
    - name: "debug"
      debug:
         msg: "{{ ansible_devices[item.0.device].partitions[item.1] }}"
      with_subelements:
        - device_partitions_as_list
        - partitions
#      shell: "blkid | cut -f 1,3 -d \" \" | grep \"{{ item.1.key }}:\" | sed 's/.*TYPE=\"\\(.*\\)\"/\\1/g'"
#      register: filesystems
#        >
#        {% set comma = joiner(",") %}
#        {% for dev in ansible_devices %}
#        {% for part in ansible_devices[dev].partitions %}
#        { comma() }}{{ part }}
#        {% endfor %}
#        {% endfor %}


